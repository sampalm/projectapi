{
	"info": {
		"_postman_id": "816b4bc2-8e22-47c9-b9dd-a80273f384e9",
		"name": "v1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "project",
			"item": [
				{
					"name": "All",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{path}}/projects",
							"host": [
								"{{path}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "One",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{path}}/project/testedenota",
							"host": [
								"{{path}}"
							],
							"path": [
								"project",
								"testedenota"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"display_name\": \"Project Teste 2\",\n    \"description\": \"this is a teste project\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}/project/testedenota",
							"host": [
								"{{path}}"
							],
							"path": [
								"project",
								"testedenota"
							]
						}
					},
					"response": []
				},
				{
					"name": "Destroy",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{path}}/project/testedenota",
							"host": [
								"{{path}}"
							],
							"path": [
								"project",
								"testedenota"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"testedenota\",\n    \"display_name\": \"Teste de Nota\",\n    \"description\": \"this is a teste project\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}/project",
							"host": [
								"{{path}}"
							],
							"path": [
								"project"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "api",
			"item": [
				{
					"name": "All",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{path}}/apis",
							"host": [
								"{{path}}"
							],
							"path": [
								"apis"
							]
						}
					},
					"response": []
				},
				{
					"name": "One",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{path}}/api/projectteste/swagger2",
							"host": [
								"{{path}}"
							],
							"path": [
								"api",
								"projectteste",
								"swagger2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"teste\",\n    \"version\": \"2.0\",\n    \"openapi_file\": \"data:@file/x-yaml;base64,\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}/api/projectteste/swagger2",
							"host": [
								"{{path}}"
							],
							"path": [
								"api",
								"projectteste",
								"swagger2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Destroy",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{path}}/api/project_test/api_teste",
							"host": [
								"{{path}}"
							],
							"path": [
								"api",
								"project_test",
								"api_teste"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"swagger2\",\n    \"project_name\": \"projectteste\",\n    \"display_name\": \"API Swagger 2.0\",\n    \"description\": \"this is a api teste\",\n    \"version\": \"1.0\",\n    \"openapi_file\": \"data:@file/x-yaml;base64,\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{path}}/api/",
							"host": [
								"{{path}}"
							],
							"path": [
								"api",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "auth",
			"item": [
				{
					"name": "Get Token",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{path}}/auth",
							"host": [
								"{{path}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NDQxODM4OTAsImlhdCI6MTY0NDE3NjY5MCwiaXNzIjoicHJvamVjdC1hcGkifQ.lOGKpEQd5PNE6kABIC7G3xfYnhq3aSscmLNW_I7ZvTE",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "path",
			"value": "http://localhost:8000/api/v1",
			"type": "string"
		}
	]
}